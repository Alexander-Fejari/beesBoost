components:
  schemas:
    StudentDetails:
      type: object
      properties:
        school:
          type: string
          example: "University of Example"
        formation:
          type: array
          items:
            type: object
            properties:
              degree:
                type: string
                example: "Bachelor of Science"
              field:
                type: string
                example: "Computer Science"
              school:
                type: string
                example: "University of Example"
              graduation_year:
                type: integer
                example: 2024
        experience:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
                example: "Intern"
              company:
                type: string
                example: "Tech Solutions Ltd"
              location:
                type: string
                example: "New York, NY"
              start_date:
                type: string
                format: date-time
                example: "2023-01-01"
              end_date:
                type: string
                format: date-time
                example: "2023-12-31"
              description:
                type: string
                example: "Worked on developing and maintaining front-end solutions."
        skills:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "JavaScript"
              level:
                type: string
                example: "Intermediate"
        certification:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "Certified JavaScript Developer"
              provider:
                type: string
                example: "Certification Board"
              date:
                type: string
                format: date-time
                example: "2022-06-15"
        languages:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "English"
              level:
                type: string
                example: "Fluent"
        game_info:
          type: array
          items:
            type: object
            properties:
              level:
                type: integer
                example: 5
              nb_jobs_done:
                type: integer
                example: 15
              nb_jobs_atm:
                type: integer
                example: 3
              title:
                type: string
                example: "Achiever"
paths:
  #GET
  /student/getDetails/{username or id}:
    get:
      summary: "Retrieve student details"
      description: "Fetches detailed information for a student based on the provided username or ID. This endpoint ensures the user is identified correctly and fetches student details if available."
      operationId: "getStudentDetails"
      tags:
        - "Student"
      # Uncomment the following line if authentication is required
      # security:
        # - BearerAuth: []
      parameters:
        - in: path
          name: param
          required: true
          schema:
            type: string
            description: "Username or ID of the student to retrieve details for."
            example: "student123"
      responses:
        '200':
          description: "Student details retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_details:
                    type: object
                    additionalProperties: true
                    description: "Detailed information about the student, structured based on student-specific attributes."
        '403':
          description: "Forbidden - Attempt to access details not applicable to the user's role."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "This field doesn't exist for the user because he/she has no student_details"
        '404':
          description: "No student found with the provided username or ID, or incorrect detail type specified."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No user found with this username or id: student123"
        '500':
          description: "Internal server error while fetching student details."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /student/getLastRegisteredStudents:
    get:
      summary: "Retrieve last registered students"
      description: "Fetches a list of the last registered students, limited by a specified number. It requires authentication and sorts students by their registration date in ascending order."
      operationId: "getLastRegisteredStudents"
      tags:
        - "Student"
      # security:
        # - BearerAuth: []
      responses:
        '200':
          description: "Successfully retrieved the list of last registered students."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                example:
                  - username: "student1"
                    role: "student"
                    registered_date: "2023-01-01T12:00:00Z"
                  - username: "student2"
                    role: "student"
                    registered_date: "2023-01-02T12:00:00Z"
        '500':
          description: "Internal server error when trying to retrieve the students."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error retrieving students"
  #PUT
  /student/updateSchool/{username or id}:
    put:
      summary: "Update student's school"
      description: "Updates the school information for a student identified by username or ID. Ensures the user is a student and updates the specified detail if valid."
      operationId: "updateStudentSchool"
      tags:
        - "Student"
      # Uncomment the following line if authentication is required
      # security:
      #   - BearerAuth: []
      parameters:
        - in: path
          name: param
          required: true
          schema:
            type: string
            description: "Username or ID of the student whose school detail is to be updated."
            example: "student123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                school:
                  type: string
                  description: "The new school name to update for the student."
                  example: "University of Example"
      responses:
        '200':
          description: "School detail updated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "School updated successfully"
        '400':
          description: "Bad request due to missing data or attempt to update multiple fields."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing data for school or Only one field can be updated at a time"
        '403':
          description: "Forbidden - Attempted to update a student detail for a non-student user."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "johndoe isn't a student"
        '404':
          description: "Student not found or no changes made, possibly due to incorrect or unchanged input data."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No changes made or student not found"
        '500':
          description: "Internal server error while updating student information."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /student/updateFormation/{username or id}:
    put:
      summary: "Update student's formation details"
      description: "Modifies the formation details array for a student, including adding, updating, or removing items, identified by username or ID."
      operationId: "updateStudentFormation"
      tags:
        - "Student"
      # Uncomment the following line if authentication is required
      # security:
      #   - BearerAuth: []
      parameters:
        - in: path
          name: username_or_id
          required: true
          schema:
            type: string
            description: "The username or ID of the student whose formation details are to be modified."
            example: "student123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  description: "The action to perform on the formation details (add, update, remove)."
                  example: "add"
                id:
                  type: string
                  description: "The ID of the formation detail to update or remove. Required for update and remove actions."
                  example: "5f2b5bcd631de8b7f6dc5df4"
                value:
                  type: object
                  additionalProperties: true
                  description: "The new or updated formation detail. Required for add and update actions."
      responses:
        '200':
          description: "Formation details modified successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Formation details updated successfully"
        '400':
          description: "Bad request due to missing data, invalid ID, or incorrect field specifications for the operation."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing data for formation or ID is required for remove operations"
        '403':
          description: "Forbidden - Attempted to update formation details for a non-student user."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "johndoe isn't a student"
        '404':
          description: "Formation detail or student not found, or no applicable changes made."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No changes made or student not found"
        '500':
          description: "Internal server error while updating formation details."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /student/updateExperience/{username or id}:
    put:
      summary: "Modify an experience entry from a student's profile"
      description: "Adds, updates, or removes a specific experience entry from a student's profile, identified by username or ID. Ensures that the operation is applicable only to students and validates the existence of the entry to be modified."
      operationId: "updateStudentExperience"
      tags:
        - "Student"
      # Uncomment the following line if authentication is required
      # security:
      #   - BearerAuth: []
      parameters:
        - in: path
          name: param
          required: true
          schema:
            type: string
            description: "Username or ID of the student whose experience entry is to be removed."
            example: "student123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  description: "The action to perform on the experience details. Should be set to 'remove' for this operation."
                  example: "remove"
                id:
                  type: string
                  description: "The ID of the experience detail to be removed. This ID is required to identify the specific entry to remove."
                  example: "5f2b5bcd631de8b7f6dc5df4"
      responses:
        '200':
          description: "Experience entry removed successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Experience entry removed successfully"
        '400':
          description: "Bad request due to missing ID for the remove operation or invalid input."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "ID is required for remove operations"
        '403':
          description: "Forbidden - Attempted to update experience details for a non-student user."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "johndoe isn't a student"
        '404':
          description: "Experience detail not found or no applicable changes made."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Object not found with ID: 5f2b5bcd631de8b7f6dc5df4"
        '500':
          description: "Internal server error while removing experience details."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /student/updateSkill/{username or id}:
    put:
      summary: "Modify skills in a student's profile"
      description: "Adds, updates, or removes a skill entry in a student's profile, depending on the specified action. The operation is only applicable to students and requires specifying the exact change needed."
      operationId: "modifyStudentSkill"
      tags:
        - "Student"
      # Uncomment the following line if authentication is required
      # security:
      #   - BearerAuth: []
      parameters:
        - in: path
          name: param
          required: true
          schema:
            type: string
            description: "Username or ID of the student whose skills are to be modified."
            example: "student123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  description: "The action to perform on the skills array ('add', 'update', 'remove')."
                  enum: [add, update, remove]
                  example: "add"
                id:
                  type: string
                  description: "The ID of the skill to update or remove, required for 'update' and 'remove' actions."
                  example: "5f2b5bcd631de8b7f6dc5df4"
                value:
                  type: object
                  additionalProperties: true
                  description: "The skill details to add or update. Required for 'add' and 'update' actions."
                  example:
                    name: "JavaScript"
                    level: "Advanced"
      responses:
        '200':
          description: "Skill entry modified successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Skill updated successfully"
        '400':
          description: "Bad request due to missing data or attempt to perform an undefined action."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing data for skills or invalid action specified"
        '403':
          description: "Forbidden - Attempted to modify skill details for a non-student user."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "johndoe isn't a student"
        '404':
          description: "Skill detail or student not found, or no applicable changes made."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Skill not found or student not found"
        '500':
          description: "Internal server error while modifying skill details."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /student/updateCertification/{username or id}:
    put:
      summary: "Modify a certification to a student's profile"
      description: "Adds, updates, or removes a certification entry to a student's profile. This operation is applicable only to students."
      operationId: "ModifyStudentCertification"
      tags:
        - "Student"
      parameters:
        - in: path
          name: param
          required: true
          schema:
            type: string
            description: "Username or ID of the student to whom the certification is to be added."
            example: "student123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Name of the certification."
                  example: "Certified JavaScript Developer"
                provider:
                  type: string
                  description: "The organization that issued the certification."
                  example: "ECMA International"
                date:
                  type: string
                  format: "date"
                  description: "Date when the certification was awarded."
                  example: "2021-08-01"
      responses:
        '200':
          description: "Certification added successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Certification added successfully"
        '400':
          description: "Bad request due to missing or incorrect data."
        '403':
          description: "Forbidden - Attempted to add certification for a non-student user."
        '404':
          description: "Student not found."
        '500':
          description: "Internal server error."
  /student/updateLanguage/{username or id}:
    put:
      summary: "Modify a language from a student's profile"
      description: "Adds, updates, or removes a language entry from a student's profile. This operation requires the ID of the language entry to identify which one to remove/updated"
      operationId: "removeStudentLanguage"
      tags:
        - "Student"
      parameters:
        - in: path
          name: param
          required: true
          schema:
            type: string
            description: "Username or ID of the student from whom the language is to be removed."
            example: "student123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: "ID of the language entry to remove."
                  example: "5f2b5bcd631de8b7f6dc5df4"
      responses:
        '200':
          description: "Language entry removed successfully."
        '400':
          description: "Bad request due to missing ID or incorrect data."
        '403':
          description: "Forbidden - Attempted to remove language for a non-student user."
        '404':
          description: "Language entry or student not found."
        '500':
          description: "Internal server error."
  /student/updateGameInfo/{username or id}:
    put:
      summary: "Update game information in a student's profile"
      description: "Adds, updates, or removes an existing game info entry in a student's profile. This operation requires the ID of the game info entry to correctly apply updates or to remove it"
      operationId: "updateStudentGameInfo"
      tags:
        - "Student"
      parameters:
        - in: path
          name: param
          required: true
          schema:
            type: string
            description: "Username or ID of the student whose game info is to be updated."
            example: "student123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: "ID of the game info to update."
                  example: "5f2b5bcd631de8b7f6dc5df4"
                level:
                  type: integer
                  description: "New level of the student in the game."
                  example: 10
                title:
                  type: string
                  description: "New title achieved in the game."
                  example: "Champion"
      responses:
        '200':
          description: "Game information updated successfully."
        '400':
          description: "Bad request due to missing ID or incorrect data."
        '403':
          description: "Forbidden - Attempted to update game information for a non-student user."
        '404':
          description: "Game info entry or student not found."
        '500':
          description: "Internal server error."




