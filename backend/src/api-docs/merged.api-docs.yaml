servers:
  -
    url: 'https://cinemania.space'
    description: 'VPS Development Server'
  -
    url: 'http://localhost:5000'
    description: 'Local Development Server'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - username
        - password
        - profile_pic
        - role
        - email
        - is_verified
        - is_active
        - is_connected
      properties:
        username:
          type: string
          unique: true
        password:
          type: string
        profile_pic:
          type: string
          default: 'https://scontent.fcrl1-1.fna.fbcdn.net/v/t1.6435-9/107209573_3210813778982759_4891830877933540151_n.jpg'
        role:
          type: string
        email:
          type: string
          unique: true
        is_verified:
          type: boolean
          default: false
        is_active:
          type: boolean
          default: true
        is_connected:
          type: boolean
          default: false
        prefered_language:
          type: string
          enum:
            - fr
            - nl
            - en
        refresh_token:
          type: string
          default: ""
        lastname:
          type: string
        firstname:
          type: string
        occupation:
          type: string
        location:
          type: string
        pick_up_line:
          type: string
        description:
          type: string
        registration_date:
          type: string
          format: date-time
          default: Date.now
        deletion_date:
          type: string
          format: date-time
        contact_info:
          type: object
          properties:
            phone:
              type: string
            street:
              type: string
            street_number:
              type: integer
            box:
              type: string
            city:
              type: string
            postal_code:
              type: integer
            country:
              type: string
        worker_details:
          $ref: '#/components/schemas/WorkerDetails'
        student_details:
          $ref: '#/components/schemas/StudentDetails'
    StudentDetails:
      type: object
      properties:
        school:
          type: string
          example: 'University of Example'
        formation:
          type: array
          items:
            type: object
            properties:
              degree:
                type: string
                example: 'Bachelor of Science'
              field:
                type: string
                example: 'Computer Science'
              school:
                type: string
                example: 'University of Example'
              graduation_year:
                type: integer
                example: 2024
        experience:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
                example: Intern
              company:
                type: string
                example: 'Tech Solutions Ltd'
              location:
                type: string
                example: 'New York, NY'
              start_date:
                type: string
                format: date-time
                example: '2023-01-01'
              end_date:
                type: string
                format: date-time
                example: '2023-12-31'
              description:
                type: string
                example: 'Worked on developing and maintaining front-end solutions.'
        skills:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: JavaScript
              level:
                type: string
                example: Intermediate
        certification:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: 'Certified JavaScript Developer'
              provider:
                type: string
                example: 'Certification Board'
              date:
                type: string
                format: date-time
                example: '2022-06-15'
        languages:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: English
              level:
                type: string
                example: Fluent
        game_info:
          type: array
          items:
            type: object
            properties:
              level:
                type: integer
                example: 5
              nb_jobs_done:
                type: integer
                example: 15
              nb_jobs_atm:
                type: integer
                example: 3
              title:
                type: string
                example: Achiever
    WorkerDetails:
      type: object
      properties:
        company:
          type: string
          example: 'Example Company Inc.'
        is_company_admin:
          type: boolean
          example: false
    Company:
      type: object
      required:
        - name
        - verif_boolean
      properties:
        name:
          type: string
          unique: true
        verif_boolean:
          allOf:
            -
              type: object
              properties:
                is_verified:
                  type: boolean
                  default: true
                is_active:
                  type: boolean
                  default: true
        profile_pic:
          type: string
        contact_info:
          allOf:
            -
              type: object
              properties:
                email:
                  type: string
                phone:
                  type: string
                street:
                  type: string
                street_number:
                  type: number
                box:
                  type: string
                city:
                  type: string
                postal_code:
                  type: number
                country:
                  type: string
        fields:
          type: array
          items:
            type: string
        creation_date:
          type: string
          format: date-time
        creator_username:
          type: string
        admins:
          type: array
          items:
            type: string
        worker:
          type: array
          items:
            type: string
        registration_date:
          type: string
          format: date-time
        deletion_date:
          type: string
          format: date-time
        offers:
          type: array
          items:
            type: string
        n_finished_contracts:
          type: number
    CompanyOffer:
      type: object
      properties:
        poster_id:
          type: string
        company_name:
          type: string
        field:
          type: string
        function:
          type: string
        location:
          type: string
        creation_date:
          type: string
          format: date-time
          default: Date.now
        start_date:
          type: string
          format: date-time
        duration:
          type: number
        CV:
          type: string
        promoted:
          type: boolean
        promotion_expiration:
          type: string
          format: date-time
        title:
          type: string
        body:
          allOf:
            -
              type: object
              properties:
                description:
                  type: string
                requirements:
                  type: array
                  items: {type: string}
                nice_to_have:
                  type: array
                  items: {type: string}
                benefits:
                  type: array
                  items: {type: string}
        taker_id:
          type: string
        status:
          type: string
        offer_language:
          type: string
tags:
  -
    name: Auth
    description: 'Operations about authentication'
  -
    name: User
    description: 'General operations about users'
  -
    name: Student
    description: 'Operations about students'
  -
    name: Worker
    description: 'Operations about workers'
  -
    name: Company
    description: 'Companies handler'
  -
    name: CompanyOffers
    description: 'Company posts/offers handler'
paths:
  /user/signUp:
    post:
      summary: 'Sign up a new user'
      description: 'Creates a new user with provided details. Validates required fields and roles, checks for existing users, hashes password, and stores the user and sends a confirmation email'
      operationId: addUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - role
                - email
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: '123456'
                profile_pic:
                  type: string
                  example: 'https://example.com/profile.jpg'
                role:
                  type: string
                  enum: [student, worker, admin, superAdmin]
                  example: student
                email:
                  type: string
                  example: user@example.com
                prefered_language:
                  type: string
                  example: 'fr nl or en'
                lastname:
                  type: string
                  example: Doe
                firstname:
                  type: string
                  example: John
                occupation:
                  type: string
                  example: Student
                location:
                  type: string
                  example: 'New York'
                pick_up_line:
                  type: string
                  example: 'Les étoiles brillent dans la nuit, illuminant les rêves de ceux qui contemplent le ciel.'
                  maxLength: 120
                description:
                  type: string
                  maxLength: 240
                  example: 'Le vent souffle doucement à travers les arbres, portant avec lui les secrets murmurés des anciens. Les feuilles dansent au rythme de la brise, créant une mélodie apaisante qui invite à la réflexion et à la tranquillité.'
                registration_date:
                  type: string
                  format: date-time
                  default: Date.now
                deletion_date:
                  type: string
                  format: date-time
                contact_info:
                  type: object
                  properties: {phone: {type: string}, street: {type: string}, street_number: {type: integer}, city: {type: string}, postal_code: {type: integer}, country: {type: string}}
                student_details:
                  $ref: '#/components/schemas/StudentDetails'
                worker_details:
                  $ref: '#/components/schemas/WorkerDetails'
        responses:
          '201':
            description: 'User created successfully.'
            content:
              application/json:
                schema:
                  type: object
                  properties: null
                  message: {type: string, example: 'User added successfully'}
                  userId: {type: string, example: 5e5df7fc8953ad317845f0f9}
          '400':
            description: 'Bad request. Missing required fields or invalid role. Or same data''s as before sent'
            content:
              application/json:
                schema:
                  type: object
                  properties: {error: {type: string, example: 'Bad request: username, password, role, and email are required fields.'}}
          '404':
            description: 'User not found or no changes needed (input same as existing data).'
            content:
              application/json:
                schema:
                  type: object
                  properties: {error: {type: string, example: 'No changes have been made, same infos as before have been given'}}
          '409': null
          '500': null
          description: 'Conflict. A user with the same username or email already exists.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'User already exists with this email: user@example.com'}
  /user/getAllUsers:
    get:
      summary: 'Retrieve all users'
      description: 'Fetches a list of all users or a subset based on extensive query parameters. It requires authentication and supports a comprehensive filter based on user model attributes.'
      operationId: getAllUsers
      tags:
        - User
      parameters:
        -
          in: query
          name: username
          schema:
            type: string
          description: 'Filter users by username.'
        -
          in: query
          name: email
          schema:
            type: string
          description: 'Filter users by email.'
        -
          in: query
          name: role
          schema:
            type: string
          description: 'Filter users by role.'
        -
          in: query
          name: is_verified
          schema:
            type: boolean
          description: 'Filter users by verification status.'
        -
          in: query
          name: is_active
          schema:
            type: boolean
          description: 'Filter users by active status.'
        -
          in: query
          name: is_connected
          schema:
            type: boolean
          description: 'Filter users by connected status.'
        -
          in: query
          name: lastname
          schema:
            type: string
          description: 'Filter users by last name.'
        -
          in: query
          name: firstname
          schema:
            type: string
          description: 'Filter users by first name.'
        -
          in: query
          name: occupation
          schema:
            type: string
          description: 'Filter users by occupation.'
        -
          in: query
          name: location
          schema:
            type: string
          description: 'Filter users by location.'
      responses:
        '200':
          description: 'Successful retrieval of users.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'Invalid query parameters provided.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Invalid query parameters'}
        '404':
          description: 'No users found matching the provided query parameters.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User not found matching those parameters'}
        '500':
          description: 'Server error occurred while retrieving users.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error retrieving users'}
  '/user/getUser/{param}':
    get:
      summary: 'Retrieve a single user'
      description: 'Fetches a user based on a username or ID provided in the URL path. It requires authentication and returns details if the user is found. It expects a username or an ID less than 24 characters as a parameter; IDs typically fit this condition, and excessive length could imply an erroneous input.'
      operationId: getUser
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user to retrieve. Must be less than 24 characters.'
            example: johndoe
      responses:
        '200':
          description: 'Successful retrieval of the user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'No user found with this username or ID, or parameter is too long.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No user found with this username or id: johndoe'}
        '500':
          description: 'Internal server error when trying to retrieve the user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error retrieving user'}
  '/user/confirmEmail/{token}':
    get:
      summary: 'Confirm user''s email'
      description: 'Confirms the user''s email address using the token provided.'
      operationId: confirmEmail
      tags:
        - User
      parameters:
        -
          in: path
          name: token
          required: true
          schema:
            type: string
            description: 'The token used to confirm the user''s email.'
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: 'Email confirmed successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Compte confirmé avec succès !'}
        '400':
          description: 'Invalid or expired token.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Token invalide ou expiré.'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Erreur interne du serveur.'}
  '/user/resendConfirmationEmail/{email}':
    get:
      summary: 'Resend confirmation email'
      description: 'Resends the confirmation email to the user.'
      operationId: resendConfirmationEmail
      tags:
        - User
      parameters:
        -
          in: path
          name: email
          required: true
          schema:
            type: string
            description: 'The email address of the user to resend the confirmation email to.'
            example: user@example.com
      responses:
        '200':
          description: 'A new confirmation email has been sent.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Un nouvel email de confirmation a été envoyé.'}
        '400':
          description: 'User already confirmed or invalid request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Cet utilisateur est déjà confirmé.'}
        '404':
          description: 'User not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Utilisateur non trouvé.'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Erreur interne du serveur.'}
  /user/deleteUser:
    delete:
      summary: 'Delete a user'
      description: 'Deletes a user by ID or username. Requires authentication and appropriate authorization (superAdmin role only). The request must contain either an ID or a username but not both, with specific format constraints.'
      operationId: deleteUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The unique identifier of the user to delete.'
                  example: 5e5df7fc8953ad317845f0f9
                username:
                  type: string
                  description: 'The username of the user to delete.'
                  example: johnDoe23
              oneOf:
                -
                  required: [id]
                -
                  required: [username]
      responses:
        '200':
          description: 'User deleted successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User deleted successfully'}
        '400':
          description: 'Bad request due to input errors, such as both or neither ID and username provided, or format issues.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Request must contain id OR username or id or username not in the good format'}
        '404':
          description: 'User not found or no user matches the provided identifier.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'User not found'}
        '500':
          description: 'Internal server error when trying to delete the user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error deleting user'}
  '/user/updateInfos/{param}':
    put:
      summary: 'Update user information'
      description: 'Updates specified fields for a user, identified by username or ID. The endpoint ensures that only certain fields can be updated, checks user existence, and field validity based on the user''s role.'
      operationId: updateUserInformation
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user to update.'
            example: johndoe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profile_pic:
                  type: string
                  description: 'New URL of the user''s profile picture.'
                  example: 'https://example.com/new-profile.jpg'
                prefered_language:
                  type: string
                  description: 'language the user''s gonna use'
                  example: 'fr, nl or en'
                lastname:
                  type: string
                  description: 'New last name of the user.'
                  example: Doe
                firstname:
                  type: string
                  description: 'New first name of the user.'
                  example: John
                occupation:
                  type: string
                  description: 'New occupation of the user.'
                  example: Developer
                location:
                  type: string
                  description: 'New location of the user.'
                  example: 'New York'
                pick_up_line:
                  type: string
                  description: 'Profil pick up line to get other people''s attention.'
                  example: 'Hi i''d like a super cool job.'
                  maxLength: 120
                description:
                  type: string
                  description: 'Description of the user.'
                  example: 'Hi im super cool and i''d like a super cool coding Job'
                  maxLength: 240
                contact_info.phone:
                  type: string
                  example: 123-456-7890
                contact_info.street:
                  type: string
                  example: 'Elm Street'
                contact_info.street_number:
                  type: integer
                  example: 42
                contact_info.box:
                  type: string
                  example: B
                contact_info.city:
                  type: string
                  example: Gotham
                contact_info.postal_code:
                  type: integer
                  example: 12345
                contact_info.country:
                  type: string
                  example: USA
                student_details.school:
                  type: string
                  example: MIT
      responses:
        '200':
          description: 'User information updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User''s infos have been updated successfully'}
        '400':
          description: 'Bad request due to invalid input fields or improper field updates based on user role. Or no data has changed since last update'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Invalid field in the body, only this can be updated: profile_pic, lastname, firstname, occupation, location, contact_info.phone, contact_info.street, contact_info.street_number, contact_info.box, contact_info.city, contact_info.country, contact_info.postal_code'}
        '404':
          description: 'User not found or no changes needed (input same as existing data).'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'User not found or no changes have been made, same infos as before have been given'}
        '500':
          description: 'Internal server error while updating user information.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error updating user'}
  '/user/updateVerified/{param}':
    put:
      summary: 'Update user verification status'
      description: 'Updates the verification status (`is_verified`) for a specified user. Requires administrator-level permissions.'
      operationId: updateVerifiedStatus
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user to update.'
            example: 5e5df7fc8953ad317845f0f9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_verified:
                  type: boolean
                  description: 'The new verification status of the user.'
                  example: true
      responses:
        '200':
          description: 'Verification status updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User is_verified updated successfully'}
        '400':
          description: 'Bad request due to input errors, such as providing multiple fields, empty request, or incorrect fields.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, examples: {multipleFields: 'Only one field (is_verified) can be updated at a time', emptyRequest: 'Empty request: Need is_verified', wrongField: 'Only the is_verified can be updated'}}
        '404':
          description: 'User not found or no changes needed (input same as existing data).'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No changes have been made, same info as before has been given'}
        '500':
          description: 'Internal server error while updating user information.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error updating user'}
  '/user/updateActive/{param}':
    put:
      summary: 'Update user active status'
      description: 'Updates the active status (`is_active`) for a specified user. This endpoint requires administrator-level permissions and will adjust the `deletion_date` based on the active status.'
      operationId: updateActiveStatus
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user to update.'
            example: 5e5df7fc8953ad317845f0f9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_active:
                  type: boolean
                  description: 'The new active status of the user. If set to false, `deletion_date` will be set to the current date.'
                  example: false
      responses:
        '200':
          description: 'Active status updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User is_active updated successfully'}
        '400':
          description: 'Bad request due to incorrect field input or invalid request format.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, examples: {onlyField: 'Only the is_active can be updated', wrongField: 'Request must contain the is_active field'}}
        '404':
          description: 'User not found or no changes needed (input same as existing data).'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No changes have been made, same info as before has been given or user not found'}
        '500':
          description: 'Internal server error while updating user information.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error updating user'}
  '/user/updateConnected/{param}':
    put:
      summary: 'Update user connection status'
      description: 'Updates the connection status (`is_connected`) for a specified user. Access is restricted to administrators and superAdmins.'
      operationId: updateConnectedStatus
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user to update.'
            example: 5e5df7fc8953ad317845f0f9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_connected:
                  type: boolean
                  description: 'The new connection status of the user.'
                  example: true
      responses:
        '200':
          description: 'Connection status updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User is_connected updated successfully'}
        '400':
          description: 'Invalid request format or wrong fields provided.'
        '404':
          description: 'User not found.'
        '500':
          description: 'Internal server error while updating user information.'
  '/user/updateUsername/{param}':
    put:
      summary: 'Update user''s username'
      description: 'Updates the username for a specified user. Access is restricted to administrators and superAdmins.'
      operationId: updateUsername
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Current username or ID of the user to update.'
            example: 5e5df7fc8953ad317845f0f9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The new username for the user.'
                  example: newUsername2024
      responses:
        '200':
          description: 'Username updated successfully.'
        '400':
          description: 'Invalid request format or wrong fields provided.'
        '404':
          description: 'User not found.'
        '500':
          description: 'Internal server error while updating username.'
  '/user/updatePassword/{param}':
    put:
      summary: 'Update user''s password'
      description: 'Updates the password for a specified user. Requires user authentication.'
      operationId: updatePassword
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user whose password is to be updated.'
            example: 5e5df7fc8953ad317845f0f9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  description: 'The new password for the user. This will be securely hashed in storage.'
                  example: newSecurePassword123!
      responses:
        '200':
          description: 'Password updated successfully.'
        '400':
          description: 'Invalid request format or wrong fields provided.'
        '404':
          description: 'User not found.'
        '500':
          description: 'Internal server error while updating password.'
  '/user/updateEmail/{param}':
    put:
      summary: 'Update user''s email'
      description: 'Updates the email address for a user, identified by a username or ID. This operation ensures the input is correct and checks if the specified email update is valid.'
      operationId: updateUserEmail
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user whose email is to be updated.'
            example: johndoe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: 'The new email address to be updated.'
                  example: newemail@example.com
      responses:
        '200':
          description: 'Email updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User email updated successfully'}
        '400':
          description: 'Bad request due to invalid input fields or improper field update attempt.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Only the email can be updated'}
        '404':
          description: 'No changes made due to incorrect or unchanged input data, or user not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No changes have been made, same info as before has been given or user not found'}
        '500':
          description: 'Internal server error while updating user information.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error updating user'}
  '/user/updatePreferedLanguage/{param}':
    put:
      summary: 'Update user''s preferred language'
      description: 'Updates the preferred language for a user, identified by username or ID. Ensures that only valid languages (''fr'', ''nl'', ''en'') are chosen.'
      operationId: updateUserPreferredLanguage
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user whose preferred language is to be updated.'
            example: johndoe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prefered_language:
                  type: string
                  description: 'The new preferred language of the user. Must be ''fr'', ''nl'', or ''en''.'
                  example: en
      responses:
        '200':
          description: 'Preferred language updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User''s preferred language updated successfully'}
        '400':
          description: 'Bad request due to invalid input or attempt to update multiple fields.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Only fr, nl, or en can be chosen as preferred_language'}
        '404':
          description: 'User not found or no changes made, possibly due to incorrect or unchanged input data.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No changes have been made, same info as before has been given'}
        '500':
          description: 'Internal server error while updating user information.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error updating user'}
  '/user/updateProfilePicture/{param}':
    put:
      summary: 'Update User Profile Picture'
      description: 'Updates the profile picture of the user identified by username or ID. The profile picture can be updated via file upload or a direct link.'
      operationId: updateProfilePic
      tags:
        - User
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the user whose profile picture is to be updated.'
            example: johndoe
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profile_pic:
                  type: string
                  format: binary
                  description: 'New profile picture file to be uploaded.'
                link:
                  type: string
                  description: 'Link to the new profile picture.'
      responses:
        '200':
          description: 'Profile picture updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Profile picture updated successfully'}
                  profile_pic: {type: string, example: /uploads/profile_pic.jpg}
        '400':
          description: 'Bad request due to no file or link provided.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No file or link provided'}
        '404':
          description: 'User not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'User not found'}
        '500':
          description: 'Internal server error while updating profile picture.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  /auth/signIn:
    post:
      summary: 'User login'
      description: 'Authenticates a user by their email or username and password, returns JWT access tokens if successful.'
      operationId: userLogin
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The user''s username.'
                  example: johndoe
                password:
                  type: string
                  format: password
                  description: 'The user''s password.'
                  example: password123
                email:
                  type: string
                  description: 'The user''s email address.'
                  example: johndoe@example.com
      responses:
        '200':
          description: 'Login successful, access token provided.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Login successful'}
                  accessToken: {type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmODQ...}
        '401':
          description: 'Unauthorized access. Login failed due to no matching user, non-active account, or incorrect password.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, examples: {noUser: {value: 'Login failed: No user matches those credentials'}, inactive: {value: 'This account isn''t active'}, badPassword: {value: 'Login failed: Bad password'}}}
        '500':
          description: 'Internal server error during login.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  /auth/renewToken:
    post:
      summary: 'Renew access token'
      description: 'Renews the user''s access token by validating the provided refresh token.'
      operationId: renewToken
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: 'The refresh token used to renew the access token.'
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmODQ...
      responses:
        '200':
          description: 'Access token successfully renewed.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: {type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmODQ...}
        '401':
          description: 'Unauthorized - No refresh token provided or token has expired.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No refresh token provided'}
                  message: {type: string, example: 'Token expired'}
        '403':
          description: 'Forbidden - Refresh token not found or invalid.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Refresh token not found or invalid'}
        '404':
          description: 'Not Found - Failed to decode refresh token.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Failed to decode refresh token'}
        '500':
          description: 'Internal Server Error - Failed to authenticate token.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Failed to authenticate token'}
  '/auth/logOut/{param}':
    post:
      summary: 'User logout'
      description: 'Logs out a user by clearing their refresh token and setting the is_connected status to false. Requires a valid refresh token.'
      operationId: logOut
      tags:
        - Auth
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'The user''s ID or username indicating which user is logging out.'
            example: 5e5df7fc8953ad317845f0f9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: 'The refresh token that needs to be invalidated.'
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmODQ...
      responses:
        '200':
          description: 'Logout successful, the user''s session has been effectively terminated.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Logout successful'}
        '400':
          description: 'Bad request, no refresh token provided.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No refresh token provided'}
        '404':
          description: 'Refresh token not found, indicating no action was taken.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Refresh token not found'}
        '500':
          description: 'Internal server error during the logout process.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  /auth/requestPasswordReset:
    post:
      summary: 'Request a password reset'
      description: 'Sends a password reset email to the user identified by their ID.'
      operationId: requestPasswordReset
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The user''s ID.'
                  example: 60d0fe4f5311236168a109ca
      responses:
        '200':
          description: 'Password reset email sent successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Email de réinitialisation envoyé.'}
                  resetToken: {type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}
        '404':
          description: 'User not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Utilisateur non trouvé.'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Erreur interne du serveur.'}
  '/auth/resetPassword/{token}':
    post:
      summary: 'Reset the user''s password'
      description: 'Resets the password for the user identified by the reset token.'
      operationId: resetPassword
      tags:
        - Auth
      parameters:
        -
          in: path
          name: token
          required: true
          schema:
            type: string
            description: 'The password reset token.'
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  description: 'The new password for the user.'
                  example: newpassword123
      responses:
        '200':
          description: 'Password reset successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Mot de passe réinitialisé avec succès.'}
        '400':
          description: 'Bad request due to invalid input or expired/invalid token.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, examples: {invalid_token: {value: 'Token invalide ou expiré.'}, short_password: {value: 'Le mot de passe doit contenir au moins 6 caractères.'}}}
        '401':
          description: 'Unauthorized request due to expired token.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Token expiré.'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Erreur interne du serveur.'}
  '/student/getDetails/{param}':
    get:
      summary: 'Retrieve student details'
      description: 'Fetches detailed information for a student based on the provided username or ID. This endpoint ensures the user is identified correctly and fetches student details if available.'
      operationId: getStudentDetails
      tags:
        - Student
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the student to retrieve details for.'
            example: student123
      responses:
        '200':
          description: 'Student details retrieved successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_details: {type: object, additionalProperties: true, description: 'Detailed information about the student, structured based on student-specific attributes.'}
        '403':
          description: 'Forbidden - Attempt to access details not applicable to the user''s role.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'This field doesn''t exist for the user because he/she has no student_details'}
        '404':
          description: 'No student found with the provided username or ID, or incorrect detail type specified.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No user found with this username or id: student123'}
        '500':
          description: 'Internal server error while fetching student details.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  /student/getLastRegisteredStudents:
    get:
      summary: 'Retrieve last registered students'
      description: 'Fetches a list of the last registered students, limited by a specified number. It requires authentication and sorts students by their registration date in ascending order.'
      operationId: getLastRegisteredStudents
      tags:
        - Student
      responses:
        '200':
          description: 'Successfully retrieved the list of last registered students.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                example:
                  - {username: student1, role: student, registered_date: '2023-01-01T12:00:00Z'}
                  - {username: student2, role: student, registered_date: '2023-01-02T12:00:00Z'}
        '500':
          description: 'Internal server error when trying to retrieve the students.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error retrieving students'}
  '/student/updateSchool/{param}':
    put:
      summary: 'Update student''s school'
      description: 'Updates the school information for a student identified by username or ID. Ensures the user is a student and updates the specified detail if valid.'
      operationId: updateStudentSchool
      tags:
        - Student
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the student whose school detail is to be updated.'
            example: student123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                school:
                  type: string
                  description: 'The new school name to update for the student.'
                  example: 'University of Example'
      responses:
        '200':
          description: 'School detail updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'School updated successfully'}
        '400':
          description: 'Bad request due to missing data or attempt to update multiple fields.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Missing data for school or Only one field can be updated at a time'}
        '403':
          description: 'Forbidden - Attempted to update a student detail for a non-student user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'johndoe isn''t a student'}
        '404':
          description: 'Student not found or no changes made, possibly due to incorrect or unchanged input data.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No changes made or student not found'}
        '500':
          description: 'Internal server error while updating student information.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/student/updateFormation/{param}':
    put:
      summary: 'Update student''s formation details'
      description: 'Modifies the formation details array for a student, including adding, updating, or removing items, identified by username or ID.'
      operationId: updateStudentFormation
      tags:
        - Student
      parameters:
        -
          in: path
          name: username_or_id
          required: true
          schema:
            type: string
            description: 'The username or ID of the student whose formation details are to be modified.'
            example: student123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  description: 'The action to perform on the formation details (add, update, remove).'
                  example: add
                id:
                  type: string
                  description: 'The ID of the formation detail to update or remove. Required for update and remove actions.'
                  example: 5f2b5bcd631de8b7f6dc5df4
                value:
                  type: object
                  additionalProperties: true
                  description: 'The new or updated formation detail. Required for add and update actions.'
      responses:
        '200':
          description: 'Formation details modified successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Formation details updated successfully'}
        '400':
          description: 'Bad request due to missing data, invalid ID, or incorrect field specifications for the operation.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Missing data for formation or ID is required for remove operations'}
        '403':
          description: 'Forbidden - Attempted to update formation details for a non-student user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'johndoe isn''t a student'}
        '404':
          description: 'Formation detail or student not found, or no applicable changes made.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No changes made or student not found'}
        '500':
          description: 'Internal server error while updating formation details.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/student/updateExperience/{param}':
    put:
      summary: 'Modify an experience entry from a student''s profile'
      description: 'Adds, updates, or removes a specific experience entry from a student''s profile, identified by username or ID. Ensures that the operation is applicable only to students and validates the existence of the entry to be modified.'
      operationId: updateStudentExperience
      tags:
        - Student
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the student whose experience entry is to be removed.'
            example: student123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  description: 'The action to perform on the experience details. Should be set to ''remove'' for this operation.'
                  example: remove
                id:
                  type: string
                  description: 'The ID of the experience detail to be removed. This ID is required to identify the specific entry to remove.'
                  example: 5f2b5bcd631de8b7f6dc5df4
      responses:
        '200':
          description: 'Experience entry removed successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Experience entry removed successfully'}
        '400':
          description: 'Bad request due to missing ID for the remove operation or invalid input.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'ID is required for remove operations'}
        '403':
          description: 'Forbidden - Attempted to update experience details for a non-student user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'johndoe isn''t a student'}
        '404':
          description: 'Experience detail not found or no applicable changes made.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Object not found with ID: 5f2b5bcd631de8b7f6dc5df4'}
        '500':
          description: 'Internal server error while removing experience details.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/student/updateSkill/{param}':
    put:
      summary: 'Modify skills in a student''s profile'
      description: 'Adds, updates, or removes a skill entry in a student''s profile, depending on the specified action. The operation is only applicable to students and requires specifying the exact change needed.'
      operationId: modifyStudentSkill
      tags:
        - Student
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the student whose skills are to be modified.'
            example: student123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  description: 'The action to perform on the skills array (''add'', ''update'', ''remove'').'
                  enum: [add, update, remove]
                  example: add
                id:
                  type: string
                  description: 'The ID of the skill to update or remove, required for ''update'' and ''remove'' actions.'
                  example: 5f2b5bcd631de8b7f6dc5df4
                value:
                  type: object
                  additionalProperties: true
                  description: 'The skill details to add or update. Required for ''add'' and ''update'' actions.'
                  example: {name: JavaScript, level: Advanced}
      responses:
        '200':
          description: 'Skill entry modified successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Skill updated successfully'}
        '400':
          description: 'Bad request due to missing data or attempt to perform an undefined action.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Missing data for skills or invalid action specified'}
        '403':
          description: 'Forbidden - Attempted to modify skill details for a non-student user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'johndoe isn''t a student'}
        '404':
          description: 'Skill detail or student not found, or no applicable changes made.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Skill not found or student not found'}
        '500':
          description: 'Internal server error while modifying skill details.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/student/updateCertification/{param}':
    put:
      summary: 'Modify a certification to a student''s profile'
      description: 'Adds, updates, or removes a certification entry to a student''s profile. This operation is applicable only to students.'
      operationId: ModifyStudentCertification
      tags:
        - Student
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the student to whom the certification is to be added.'
            example: student123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the certification.'
                  example: 'Certified JavaScript Developer'
                provider:
                  type: string
                  description: 'The organization that issued the certification.'
                  example: 'ECMA International'
                date:
                  type: string
                  format: date
                  description: 'Date when the certification was awarded.'
                  example: '2021-08-01'
      responses:
        '200':
          description: 'Certification added successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Certification added successfully'}
        '400':
          description: 'Bad request due to missing or incorrect data.'
        '403':
          description: 'Forbidden - Attempted to add certification for a non-student user.'
        '404':
          description: 'Student not found.'
        '500':
          description: 'Internal server error.'
  '/student/updateLanguage/{param}':
    put:
      summary: 'Modify a language from a student''s profile'
      description: 'Adds, updates, or removes a language entry from a student''s profile. This operation requires the ID of the language entry to identify which one to remove/updated'
      operationId: removeStudentLanguage
      tags:
        - Student
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the student from whom the language is to be removed.'
            example: student123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'ID of the language entry to remove.'
                  example: 5f2b5bcd631de8b7f6dc5df4
      responses:
        '200':
          description: 'Language entry removed successfully.'
        '400':
          description: 'Bad request due to missing ID or incorrect data.'
        '403':
          description: 'Forbidden - Attempted to remove language for a non-student user.'
        '404':
          description: 'Language entry or student not found.'
        '500':
          description: 'Internal server error.'
  '/student/updateGameInfo/{param}':
    put:
      summary: 'Update game information in a student''s profile'
      description: 'Adds, updates, or removes an existing game info entry in a student''s profile. This operation requires the ID of the game info entry to correctly apply updates or to remove it'
      operationId: updateStudentGameInfo
      tags:
        - Student
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the student whose game info is to be updated.'
            example: student123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'ID of the game info to update.'
                  example: 5f2b5bcd631de8b7f6dc5df4
                level:
                  type: integer
                  description: 'New level of the student in the game.'
                  example: 10
                title:
                  type: string
                  description: 'New title achieved in the game.'
                  example: Champion
      responses:
        '200':
          description: 'Game information updated successfully.'
        '400':
          description: 'Bad request due to missing ID or incorrect data.'
        '403':
          description: 'Forbidden - Attempted to update game information for a non-student user.'
        '404':
          description: 'Game info entry or student not found.'
        '500':
          description: 'Internal server error.'
  '/worker/getDetails/{param}':
    get:
      summary: 'Retrieve worker details'
      description: 'Fetches detailed information for a worker based on the provided username or ID. This endpoint ensures the user is identified correctly and fetches worker details if available.'
      operationId: getWorkerDetails
      tags:
        - Worker
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the worker to retrieve details for.'
            example: worker123
      responses:
        '200':
          description: 'Worker details retrieved successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  worker_details: {type: object, additionalProperties: true, description: 'Detailed information about the worker, structured based on worker-specific attributes.'}
        '403':
          description: 'Forbidden - Attempt to access details not applicable to the user''s role.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'This field doesn''t exist for the user because he/she has no worker_details'}
        '404':
          description: 'No worker found with the provided username or ID, or incorrect detail type specified.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No user found with this username or id: worker123'}
        '500':
          description: 'Internal server error while fetching worker details.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/worker/updateIsAdmin/{param}':
    put:
      summary: 'Update worker''s company admin status'
      description: 'Updates the `is_company_admin` status for a worker. This operation checks if the user is a worker and updates their company admin status.'
      operationId: updateWorkerIsAdmin
      tags:
        - Worker
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the worker whose admin status is to be updated.'
            example: worker123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_company_admin:
                  type: boolean
                  description: 'New admin status within the company for the worker.'
                  example: true
      responses:
        '200':
          description: 'Admin status for the worker updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Worker admin status updated successfully'}
        '400':
          description: 'Bad request, such as when the user is not a worker or the field is invalid.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'User is not a worker'}
        '404':
          description: 'User not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'User not found'}
        '500':
          description: 'Internal server error while updating worker admin status.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Error updating worker admin status'}
  '/worker/updateCompany/{param}':
    put:
      summary: 'Update worker''s company detail'
      description: 'Updates a specific detail within the worker''s profile, identified by username or ID. Ensures the user is a worker and updates the specified detail if valid, can also be used with empty string to delete worker''s company'
      operationId: updateWorkerCompany
      tags:
        - Worker
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'Username or ID of the worker whose detail is to be updated.'
            example: worker123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                company:
                  type: string
                  description: 'The new company detail to update for the worker.'
                  example: 'NewCompany Inc.'
      responses:
        '200':
          description: 'Detail updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Company updated successfully'}
        '400':
          description: 'Bad request due to missing data for the update.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Missing data for company'}
        '403':
          description: 'Forbidden - Attempted to update a worker detail for a non-worker user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'johndoe isn''t a worker'}
        '404':
          description: 'User not found or no changes made, possibly due to incorrect or unchanged input data.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'No changes made or worker not found'}
        '500':
          description: 'Internal server error while updating worker information.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  /addCompany:
    post:
      summary: 'Add a new company'
      description: 'Creates a new company record in the system.'
      operationId: createCompany
      tags:
        - Company
      security:
        -
          BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '201':
          description: 'Company created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: 'Bad request due to invalid input.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Invalid input data'}
        '401':
          description: 'Unauthorized request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: Unauthorized}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  /getCompanies:
    get:
      summary: 'Get a list of companies'
      description: 'Retrieves a list of companies based on query parameters.'
      operationId: getCompanies
      tags:
        - Company
      parameters:
        -
          in: query
          name: options
          schema:
            type: object
            additionalProperties: true
          description: 'Query parameters to filter companies.'
      responses:
        '200':
          description: 'List of companies retrieved successfully.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'An unknown error occurred'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/getCompany/{param}':
    get:
      summary: 'Get detailed company information'
      description: 'Retrieves detailed information for a specific company identified by its ID or name.'
      operationId: getCompany
      tags:
        - Company
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'ID or name of the company.'
            example: 60d0fe4f5311236168a109ca
      responses:
        '200':
          description: 'Company details retrieved successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'An unknown error occurred'}
        '404':
          description: 'Company not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Company not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/getCompanyBasicInfo/{param}':
    get:
      summary: 'Get basic company information'
      description: 'Retrieves basic information (ID, name, profile picture) for a specific company identified by its ID or name.'
      operationId: getCompanyBasicInfo
      tags:
        - Company
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'ID or name of the company.'
            example: 60d0fe4f5311236168a109ca
      responses:
        '200':
          description: 'Basic company information retrieved successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id: {type: string, example: 60d0fe4f5311236168a109ca}
                  name: {type: string, example: 'Example Company'}
                  profile_pic: {type: string, example: 'https://example.com/profile-pic.jpg'}
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Invalid parameter length'}
        '404':
          description: 'Company not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Company not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/updateCompany/{param}':
    put:
      summary: 'Update company information'
      description: 'Updates the information of a specific company identified by its ID or name.'
      operationId: updateCompany
      tags:
        - Company
      parameters:
        -
          in: path
          name: param
          required: true
          schema:
            type: string
            description: 'ID or name of the company to update.'
            example: 60d0fe4f5311236168a109ca
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '200':
          description: 'Company information updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Invalid parameter length'}
        '404':
          description: 'Company not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Company not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/deleteCompany/{id}':
    delete:
      summary: 'Delete a company'
      description: 'Deletes a specific company identified by its ID.'
      operationId: deleteCompany
      tags:
        - Company
      parameters:
        -
          in: path
          name: id
          required: true
          schema:
            type: string
            description: 'ID of the company to delete.'
            example: 60d0fe4f5311236168a109ca
      responses:
        '200':
          description: 'Company deleted successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Company deleted successfully'}
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'An unknown error occurred'}
        '404':
          description: 'Company not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Company not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  /addPost:
    post:
      summary: 'Add a new company offer'
      description: 'Creates a new company offer in the system.'
      operationId: createOffer
      tags:
        - CompanyOffers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyOffer'
      responses:
        '201':
          description: 'Company offer created successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Offer created successfully'}
                  offer: {$ref: '#/components/schemas/CompanyOffer'}
        '400':
          description: 'Bad request due to invalid input or user ID.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Invalid user id'}
                  error: {type: string, example: 'Invalid input data'}
        '403':
          description: 'Forbidden due to user not being an employee or not belonging to a company.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'You are not allowed to post an add since u didnt join a company'}
        '404':
          description: 'User or company not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'User not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  /getPosts:
    get:
      summary: 'Get a list of company offers'
      description: 'Retrieves a list of company offers based on query parameters.'
      operationId: getOffers
      tags:
        - CompanyOffers
      parameters:
        -
          in: query
          name: options
          schema:
            type: object
            additionalProperties: true
          description: 'Query parameters to filter offers.'
      responses:
        '200':
          description: 'List of offers retrieved successfully.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyOffer'
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'An unknown error occurred'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/getPostById/{id}':
    get:
      summary: 'Get detailed offer information by ID'
      description: 'Retrieves detailed information for a specific offer identified by its ID.'
      operationId: getOfferById
      tags:
        - CompanyOffers
      parameters:
        -
          in: path
          name: id
          required: true
          schema:
            type: string
            description: 'ID of the offer.'
            example: 60d0fe4f5311236168a109ca
      responses:
        '200':
          description: 'Offer details retrieved successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyOffer'
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'An unknown error occurred'}
        '404':
          description: 'Offer not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Offer not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/getPostWithCompanyInfo/{id}':
    get:
      summary: 'Get offer and associated company information'
      description: 'Retrieves detailed information for a specific offer and the associated company identified by the offer''s ID.'
      operationId: getOfferWithCompanyInfo
      tags:
        - CompanyOffers
      parameters:
        -
          in: path
          name: id
          required: true
          schema:
            type: string
            description: 'ID of the offer.'
            example: 60d0fe4f5311236168a109ca
      responses:
        '200':
          description: 'Offer and company details retrieved successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  offer: {$ref: '#/components/schemas/CompanyOffer'}
                  company: {$ref: '#/components/schemas/Company'}
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'An unknown error occurred'}
        '404':
          description: 'Offer or company not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Offer not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/updatePost/{id}':
    put:
      summary: 'Update a company offer'
      description: 'Updates the information of a specific company offer identified by its ID.'
      operationId: updateOffer
      tags:
        - CompanyOffers
      parameters:
        -
          in: path
          name: id
          required: true
          schema:
            type: string
            description: 'ID of the offer to update.'
            example: 60d0fe4f5311236168a109ca
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyOffer'
      responses:
        '200':
          description: 'Company offer updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyOffer'
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Invalid offer ID'}
        '404':
          description: 'Offer not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Offer not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/updatePostBody/{id}':
    put:
      summary: 'Update the body of a company offer'
      description: 'Updates the body information (description, requirements, nice_to_have, benefits) of a specific company offer identified by its ID.'
      operationId: updateOfferBody
      tags:
        - CompanyOffers
      parameters:
        -
          in: path
          name: id
          required: true
          schema:
            type: string
            description: 'ID of the offer to update.'
            example: 60d0fe4f5311236168a109ca
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: 'Updated description'
                requirements:
                  type: array
                  items: {type: string}
                  example: ['Requirement 1', 'Requirement 2']
                nice_to_have:
                  type: array
                  items: {type: string}
                  example: ['Nice to have 1', 'Nice to have 2']
                benefits:
                  type: array
                  items: {type: string}
                  example: ['Benefit 1', 'Benefit 2']
      responses:
        '200':
          description: 'Company offer body updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyOffer'
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Invalid offer ID'}
        '404':
          description: 'Offer not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Offer not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
  '/deletePost/{id}':
    delete:
      summary: 'Delete a company offer'
      description: 'Deletes a specific company offer identified by its ID.'
      operationId: deleteOffer
      tags:
        - CompanyOffers
      parameters:
        -
          in: path
          name: id
          required: true
          schema:
            type: string
            description: 'ID of the offer to delete.'
            example: 60d0fe4f5311236168a109ca
      responses:
        '200':
          description: 'Company offer deleted successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Offer deleted successfully'}
        '400':
          description: 'Bad request due to invalid input or an unknown error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Invalid offer ID'}
        '404':
          description: 'Offer not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string, example: 'Offer not found'}
        '500':
          description: 'Internal server error.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, example: 'Internal server error'}
